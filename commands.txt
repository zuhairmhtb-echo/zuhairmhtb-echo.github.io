1. Create a manifest.json file to contain the configuration of PWA.

2. Add the link to the manifest file in the file where PWA should be enabled.

3. In order to add IOS Support:
- Add a link to HTML tag for icon.
- Add Meta tag for the color of the status bar in standalone mode.
- Add Meta tag for theme color of the native app

4. Service Workers:
- Use background Sync
- Load Content offline
- Use push notifications
- are JS files
- Regular Js files run on a single thread and is tightly coupled with the HTML. For service worker files, it does not run on the same thread 
as regular Js files. It runs on a separate thread isolated away from the HTML page. As a result this thread has no access to the DOM and therefore 
cannot change the page content directly. Instead, service worker runs in the background (even when the app closes) and handles the app-like 
functionality by listening and reacting to events which occur in the browser. The types of task these service workers can perform are:

  a. Listen for Fetch requests
  b. Push Messages
  c. Cache data
  d. Update cache
  e. Listen to life cycle events

- The service worker js file (sw.js) is usually stored in the root directoey next o index.html so that it has a global scope and can access all files within its 
directory and subdirectories of the directory.

- Service Workers only work on pages where they are served over a secure HTTPS connection.

5. Life Cycle of Service Workers:
- First step of SW is to register it with the browser. This registration is done through a normal js file (app.js) of the site and not the sw.js file itself. This 
event in the lifecycle is known as an 'Install Event'. At that point, we can do some asset caching so that later on we could access those assets that we cached when 
we are offline. Once the SW is installed, if we reload the page in the browser. the SW does not need to reinstall as long as it is already installed in the device. 
It registers itself automatically when the page is reloaded. However, if there is a change to the SW file, it will reinstall itself. After being reinstalled, it 
does not automatica;y replace the old sw file but remains in waiting. The new SW file will only become active after all instances of our application is closed. It 
includes all the tabs in the browser and app instances in the device.

- When the service worker is registered, at some point the SW becomes active. At that point the browser fires an active event which we can listen and react to, if we 
want, inside the sw.js file. Once the SW is active, it can access all the different files inside its scope. The Browser emits an install event automatically when the 
service worker is being installed. We can listen to that install event inside the service worker and perform some tasks when that event occurs.

6. Lighthouse Audit
- Chrome devtools provides us a way to audit our application using the lighthouse plugin. It gives us a checklist of required actions to make our site a valid PWA.

7. Add to Home Screen Banner
- When we are on Android device, we have an install banner which can be used to easily prompt the user to install the application. The install banner in chrome only appears 
if some criterias are met. One of the reuqired criteria is to have a 'Fetch' event listener.

- Fetch events occur whenever we try to get something from the browser e.g. a CSS file. The SW listens for such fetch requests and acts as a proxy between the client side 
application and the server. Whenever, the application makes a request, it first intercepts it and can do the following:
  a. Do nothing and forward the request to server
  b. Modify the request before forwarding it.
  c. Stop the request and return response to the client.

- This is usually done to intercept a request and return the response from cache (if available). This enhances speed of browsing.


8. The Install Banner
